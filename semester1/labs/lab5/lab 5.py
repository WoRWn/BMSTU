# Лабораторная работа №5 вариант 44
# Гаев Дмитрий ИУ7-14Б

# Назначение программы: вывести таблицу значений функции на отрезке [-1;1] с шагом 0.1 и построить ее график

from math import cos, pi  # импорт функций cos и pi из модуля math
eps = 1e-3  # значение точности

# Блок 1: ввод пользователем минимального и максимального значения аргумента x, шаг разбиения отрезка
r_min = float(input('Введите минимального значение аргумента r: '))  # минимальный аргумент r
r_max = float(input('Введите максимального значение аргумента r: '))  # максимальный аргумент r
step = float(input('Введите значение шага разбиения: '))  # шаг разбиения

# Блок 2: расчет табличных значений, вывод таблицы и подсчет количества значений функции f1 на промежутке
amount = 0  # переменная для подсчета количество значений функции на промежутке [-0.5;0.5]
print('------------------------------------\n'
      '|     x    |     y1    |     y2    |\n'
      '|----------------------------------|')
iterations = int((r_max - r_min + step) / step)  # расчет количества итераций
r = r_min  # переменная для вычисления значений
for _ in range(iterations):
    f1 = r ** 2 - cos(pi * r) ** 2  # вычисление значения первой функции
    if -0.5 <= f1 <= 0.5:
        amount += 1  # увеличение значения счетчика
    f2 = r ** 3 - 4 * r ** 2 + 2  # вычисление значения второй функции
    if abs(r) < eps:  # проверка точности
        r = 0
    if abs(f1) < eps:  # проверка точности
        f1 = 0
    print('| {0:8.5g} | {1:9.5g} | {2:9.5g} |'.format(r, f1, f2))  # вывод значений x, f1, f2 в таблицу
    r += step
print('------------------------------------')

# Блок 3: ввод пользователем нужного количества засечек на графике и их вывод
notches = int(input('Введите требуемое количество засечек на графике от 4 до 8: '))  # количество засечек на графике
if notches < 4 or notches > 8:  # проверка правильности ввода количества засечек на графике
    print('Введено неправильное значение, количество засечек должно быть в диапазоне от 4 до 8')
    exit()

# Блок 4: построение оси Оу
step_of_notch = 1.98 / (notches - 1)  # шаг вывода засечек
notch = -1  # переменная для хранения засечек
print('\nГрафик функции y = r²-cos²(πr)')  # вывод заголовка графика
axis_y = '\t -1'  # ось Оу
for i in range(notches-1):
    notch += step_of_notch  # переход к следующей засечке
    axis_y += (' ' * 50 + '{:5.2g}'.format(notch))[(-91//(notches-1)):]  # добавление засечки в ось
print(axis_y)  # вывод оси Оу

# Блок 3: построение графика функции
r = r_min  # переменная для вычисления значений
for _ in range(iterations):
    f = r ** 2 - cos(pi * r) ** 2  # вычисление значения функции
    pos = int(f / 0.02)  # вычисление позиции точки графика с шириной в 100 символов
    if abs(r) < eps:  # проверка точности
        r = 0
    if abs(f) < eps:  # проверка точности
        f = 0
    if -50 <= pos < 0:
        print('{0:5.2g}|'.format(r) + (50 + pos) * ' ' + '*' + abs(pos + 1) * ' ' + '|' + 49 * ' ')  # положительная
        # по оси Ox точка в требуемом диапазоне
    elif 0 < pos <= 49:
        print('{0:5.2g}|'.format(r) + 50 * ' ' + '|' + (pos - 1) * ' ' + '*' + (49 - pos) * ' ')  # отрицательная по
        # оси Ox точка в требуемом диапазоне
    elif pos == 0:
        print('{0:5.2g}|'.format(r) + 50 * ' ' + '*' + 49 * ' ')  # точка в 0 по оси Ох
    else:
        print('{0:5.2g}|'.format(r) + 50 * ' ' + '|' + 49 * ' ')  # точка вне требуемого диапазона
    r += step

# Блок 5: вывод количества значений функции f1 на промежутке [-0.5;0.5]
print('Количество значений функции f1 на промежутке [-0.5;0.5] равно: {}'.format(amount))  # вывод количества значений
# функции на диапазоне

# 16 - x**2
# выбрать диапазон, график 100 символов, 2 засечки
